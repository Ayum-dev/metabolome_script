
# 1. 必要なパッケージ
library(pathview)
library(org.Mm.eg.db)
library(AnnotationDbi)

# 2. データの準備
# トランスクリプトームデータ
gene_data <- read.csv("deg_values_DESeq2_EG.csv")

# Ensembl IDからEntrez IDへの変換
entrez_ids <- mapIds(org.Mm.eg.db,
                     keys = gene_data$ensembl_ID,
                     column = "ENTREZID",
                     keytype = "ENSEMBL",
                     multiVals = "first")


# FC行列作成
gene_fc_matrix <- cbind(
    IP_Dox6d = gene_data$IP_Dox6d.IP_3d_log2FC,
    EG_Dox6d = gene_data$EG_Dox6d.IP_3d_log2FC,
　　 Myc_binding = gene_data$MYC_Max_binding_gene
)
rownames(gene_fc_matrix) <- entrez_ids
gene_fc_matrix <- gene_fc_matrix[!is.na(rownames(gene_fc_matrix)), ]

# メタボロームデータ
data_raw <- read.csv("metabolome.csv",
                     header = TRUE,
                     skip = 1,
                     row.names = 1,
                     check.names = FALSE)

# N.D.の処理
find_min_non_nd <- function(x) {
    numeric_values <- as.numeric(x[x != "N.D."])
    return(min(numeric_values))
}

convert_to_numeric <- function(x) {
    min_val <- find_min_non_nd(x)
    x[x == "N.D."] <- min_val/2
    return(as.numeric(x))
}

data_matrix <- apply(data_raw, 2, convert_to_numeric)
rownames(data_matrix) <- rownames(data_raw)

# メタボロームのFC計算
control_mean <- rowMeans(data_matrix[, 1:4, drop=FALSE])
dox2d_mean <- rowMeans(data_matrix[, 5:8, drop=FALSE])
dox4d_mean <- rowMeans(data_matrix[, 9:12, drop=FALSE])
dox6d_mean <- rowMeans(data_matrix[, 13:16, drop=FALSE])

dox2d_fc <- log2(dox2d_mean/control_mean)
dox4d_fc <- log2(dox4d_mean/control_mean)
dox6d_fc <- log2(dox6d_mean/control_mean)

cpd_fc_matrix <- cbind(
    Dox2d = dox2d_fc,
    Dox4d = dox4d_fc,
    Dox6d = dox6d_fc
)

# 3. パスウェイリストの読み込み
pathway_list <- read.csv("kegg_list_final.csv")

# 4. 出力ディレクトリの設定
main_dir <- "pathview_output"
if(!dir.exists(main_dir)) {
    dir.create(main_dir)
}
setwd(main_dir)

# 5. 各パスウェイについて処理
for(i in 1:nrow(pathway_list)) {
    # パスウェイIDを5桁の文字列として処理
    pid <- sprintf("mmu%05d", as.integer(pathway_list$pathway_id[i]))
    pathway_name <- pathway_list$pathway_name[i]
    
    # パスウェイごとのディレクトリ作成
    pathway_dir <- file.path(main_dir, pathway_name)
    if(!dir.exists(pathway_dir)) {
        dir.create(pathway_dir)
    }
    
    # 作業ディレクトリを変更
    old_wd <- getwd()
    setwd(pathway_dir)
    
    # pathviewで描画
    tryCatch({
        pathview(
            gene.data = gene_fc_matrix,
            cpd.data = cpd_fc_matrix,
            pathway.id = pid,
            species = "mmu",
            limit = list(gene = 2, cpd = 4),
            bins = list(gene = 20, cpd = 20),
            multi.state = TRUE,
            same.layer = FALSE,
            out.suffix = "Dox_integrated",
            kegg.native = TRUE,
            cpd.idtype = "kegg",
            gene.idtype = "entrez",
            low = list(gene = "green", cpd = "blue"),
            mid = list(gene = "gray", cpd = "gray"),
            high = list(gene = "magenta", cpd = "yellow"),
            node.sum = "mean",
            plot.col.key = FALSE
        )
        cat("Successfully processed pathway:", pid, "\n")
    }, error = function(e) {
        cat("Error processing pathway:", pid, "\n")
        print(e)
    })
    
    # 作業ディレクトリを元に戻す
    setwd(old_wd)
}
